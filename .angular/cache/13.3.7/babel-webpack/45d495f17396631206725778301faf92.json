{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/raulmelo/Documents/projetos/design-system/storybook-wyz/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nconst Queue = require('yocto-queue');\n\nconst pLimit = concurrency => {\n  if (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {\n    throw new TypeError('Expected `concurrency` to be a number from 1 and up');\n  }\n\n  const queue = new Queue();\n  let activeCount = 0;\n\n  const next = () => {\n    activeCount--;\n\n    if (queue.size > 0) {\n      queue.dequeue()();\n    }\n  };\n\n  const run = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (fn, resolve, ...args) {\n      activeCount++;\n\n      const result = _asyncToGenerator(function* () {\n        return fn(...args);\n      })();\n\n      resolve(result);\n\n      try {\n        yield result;\n      } catch {}\n\n      next();\n    });\n\n    return function run(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  const enqueue = (fn, resolve, ...args) => {\n    queue.enqueue(run.bind(null, fn, resolve, ...args));\n\n    _asyncToGenerator(function* () {\n      // This function needs to wait until the next microtask before comparing\n      // `activeCount` to `concurrency`, because `activeCount` is updated asynchronously\n      // when the run function is dequeued and called. The comparison in the if-statement\n      // needs to happen asynchronously as well to get an up-to-date value for `activeCount`.\n      yield Promise.resolve();\n\n      if (activeCount < concurrency && queue.size > 0) {\n        queue.dequeue()();\n      }\n    })();\n  };\n\n  const generator = (fn, ...args) => new Promise(resolve => {\n    enqueue(fn, resolve, ...args);\n  });\n\n  Object.defineProperties(generator, {\n    activeCount: {\n      get: () => activeCount\n    },\n    pendingCount: {\n      get: () => queue.size\n    },\n    clearQueue: {\n      value: () => {\n        queue.clear();\n      }\n    }\n  });\n  return generator;\n};\n\nmodule.exports = pLimit;","map":{"version":3,"names":["Queue","require","pLimit","concurrency","Number","isInteger","Infinity","TypeError","queue","activeCount","next","size","dequeue","run","fn","resolve","args","result","enqueue","bind","Promise","generator","Object","defineProperties","get","pendingCount","clearQueue","value","clear","module","exports"],"sources":["/Users/raulmelo/Documents/projetos/design-system/storybook-wyz/node_modules/p-limit/index.js"],"sourcesContent":["'use strict';\nconst Queue = require('yocto-queue');\n\nconst pLimit = concurrency => {\n\tif (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {\n\t\tthrow new TypeError('Expected `concurrency` to be a number from 1 and up');\n\t}\n\n\tconst queue = new Queue();\n\tlet activeCount = 0;\n\n\tconst next = () => {\n\t\tactiveCount--;\n\n\t\tif (queue.size > 0) {\n\t\t\tqueue.dequeue()();\n\t\t}\n\t};\n\n\tconst run = async (fn, resolve, ...args) => {\n\t\tactiveCount++;\n\n\t\tconst result = (async () => fn(...args))();\n\n\t\tresolve(result);\n\n\t\ttry {\n\t\t\tawait result;\n\t\t} catch {}\n\n\t\tnext();\n\t};\n\n\tconst enqueue = (fn, resolve, ...args) => {\n\t\tqueue.enqueue(run.bind(null, fn, resolve, ...args));\n\n\t\t(async () => {\n\t\t\t// This function needs to wait until the next microtask before comparing\n\t\t\t// `activeCount` to `concurrency`, because `activeCount` is updated asynchronously\n\t\t\t// when the run function is dequeued and called. The comparison in the if-statement\n\t\t\t// needs to happen asynchronously as well to get an up-to-date value for `activeCount`.\n\t\t\tawait Promise.resolve();\n\n\t\t\tif (activeCount < concurrency && queue.size > 0) {\n\t\t\t\tqueue.dequeue()();\n\t\t\t}\n\t\t})();\n\t};\n\n\tconst generator = (fn, ...args) => new Promise(resolve => {\n\t\tenqueue(fn, resolve, ...args);\n\t});\n\n\tObject.defineProperties(generator, {\n\t\tactiveCount: {\n\t\t\tget: () => activeCount\n\t\t},\n\t\tpendingCount: {\n\t\t\tget: () => queue.size\n\t\t},\n\t\tclearQueue: {\n\t\t\tvalue: () => {\n\t\t\t\tqueue.clear();\n\t\t\t}\n\t\t}\n\t});\n\n\treturn generator;\n};\n\nmodule.exports = pLimit;\n"],"mappings":"AAAA;;;;AACA,MAAMA,KAAK,GAAGC,OAAO,CAAC,aAAD,CAArB;;AAEA,MAAMC,MAAM,GAAGC,WAAW,IAAI;EAC7B,IAAI,EAAE,CAACC,MAAM,CAACC,SAAP,CAAiBF,WAAjB,KAAiCA,WAAW,KAAKG,QAAlD,KAA+DH,WAAW,GAAG,CAA/E,CAAJ,EAAuF;IACtF,MAAM,IAAII,SAAJ,CAAc,qDAAd,CAAN;EACA;;EAED,MAAMC,KAAK,GAAG,IAAIR,KAAJ,EAAd;EACA,IAAIS,WAAW,GAAG,CAAlB;;EAEA,MAAMC,IAAI,GAAG,MAAM;IAClBD,WAAW;;IAEX,IAAID,KAAK,CAACG,IAAN,GAAa,CAAjB,EAAoB;MACnBH,KAAK,CAACI,OAAN;IACA;EACD,CAND;;EAQA,MAAMC,GAAG;IAAA,6BAAG,WAAOC,EAAP,EAAWC,OAAX,EAAoB,GAAGC,IAAvB,EAAgC;MAC3CP,WAAW;;MAEX,MAAMQ,MAAM,GAAG,kBAAC;QAAA,OAAYH,EAAE,CAAC,GAAGE,IAAJ,CAAd;MAAA,CAAD,GAAf;;MAEAD,OAAO,CAACE,MAAD,CAAP;;MAEA,IAAI;QACH,MAAMA,MAAN;MACA,CAFD,CAEE,MAAM,CAAE;;MAEVP,IAAI;IACJ,CAZQ;;IAAA,gBAAHG,GAAG;MAAA;IAAA;EAAA,GAAT;;EAcA,MAAMK,OAAO,GAAG,CAACJ,EAAD,EAAKC,OAAL,EAAc,GAAGC,IAAjB,KAA0B;IACzCR,KAAK,CAACU,OAAN,CAAcL,GAAG,CAACM,IAAJ,CAAS,IAAT,EAAeL,EAAf,EAAmBC,OAAnB,EAA4B,GAAGC,IAA/B,CAAd;;IAEA,kBAAC,aAAY;MACZ;MACA;MACA;MACA;MACA,MAAMI,OAAO,CAACL,OAAR,EAAN;;MAEA,IAAIN,WAAW,GAAGN,WAAd,IAA6BK,KAAK,CAACG,IAAN,GAAa,CAA9C,EAAiD;QAChDH,KAAK,CAACI,OAAN;MACA;IACD,CAVD;EAWA,CAdD;;EAgBA,MAAMS,SAAS,GAAG,CAACP,EAAD,EAAK,GAAGE,IAAR,KAAiB,IAAII,OAAJ,CAAYL,OAAO,IAAI;IACzDG,OAAO,CAACJ,EAAD,EAAKC,OAAL,EAAc,GAAGC,IAAjB,CAAP;EACA,CAFkC,CAAnC;;EAIAM,MAAM,CAACC,gBAAP,CAAwBF,SAAxB,EAAmC;IAClCZ,WAAW,EAAE;MACZe,GAAG,EAAE,MAAMf;IADC,CADqB;IAIlCgB,YAAY,EAAE;MACbD,GAAG,EAAE,MAAMhB,KAAK,CAACG;IADJ,CAJoB;IAOlCe,UAAU,EAAE;MACXC,KAAK,EAAE,MAAM;QACZnB,KAAK,CAACoB,KAAN;MACA;IAHU;EAPsB,CAAnC;EAcA,OAAOP,SAAP;AACA,CAjED;;AAmEAQ,MAAM,CAACC,OAAP,GAAiB5B,MAAjB"},"metadata":{},"sourceType":"script"}